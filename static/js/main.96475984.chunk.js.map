{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/contacts-store.js","helpers/Toast.js","components/Container/Container.js","redux/contacts-selector.js","components/SubmitForm/SubmitForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js","components/SubmitForm/SubmitForm.module.css"],"names":["module","exports","contactsActions","AddContact","createAction","name","number","payload","id","shortid","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","contactPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","persistor","persistStore","notify","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Container","children","className","getContacts","getFilter","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","includes","SubmitForm","useState","setName","setNumber","setId","uniqeID","dispatch","useDispatch","useSelector","handleInputChange","event","target","value","reset","s","Div","Form","onSubmit","preventDefault","find","contact","toLocaleLowerCase","Label","htmlFor","type","Input","pattern","title","required","onChange","Button","ContactList","style","Contacts__container","Contact__list","map","Contact__item","onClick","Filter","LabelText","e","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.96475984.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Contacts__container\":\"ContactList_Contacts__container__2khWm\",\"Contact__list\":\"ContactList_Contact__list__3GXw4\",\"Contact__item\":\"ContactList_Contact__item__2HblB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Label\":\"Filter_Label__k6tKT\",\"LabelText\":\"Filter_LabelText__1DJ31\",\"Input\":\"Filter_Input__nl-BD\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n// import types from './contacts-types';\r\n\r\n//* Через классы\r\n// const AddContact = newContact => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid(),\r\n//     newContact,\r\n//   },\r\n// });\r\n\r\n//* Create Action\r\nconst AddContact = createAction('Contacts/addContact', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: shortid(),\r\n      number,\r\n      name,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('Contacts/deleteContact');\r\n\r\n// const deleteContact = contact => ({\r\n//   type: types.DELETE,\r\n//   payload: contact,\r\n// });\r\n\r\nconst changeFilter = createAction('Contacts/changeFilter');\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nconst contactsActions = {\r\n  AddContact,\r\n  deleteContact,\r\n  changeFilter,\r\n};\r\n\r\nexport default contactsActions;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\n// import types from './contacts-types';\r\nimport actions from './contacts-actions';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n//* CreateReducer\r\nconst items = createReducer([], {\r\n  [actions.AddContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { combineReducers, createStore } from 'redux';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst contactPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactPersistConfig, contactsReducer),\r\n  },\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst notify = name =>\r\n  toast.error(`${name} is already in contacts!`, {\r\n    position: 'top-right',\r\n    autoClose: 5000,\r\n    hideProgressBar: false,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined,\r\n  });\r\n\r\nexport default notify;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Container.css';\n\nconst Container = ({ children }) => <div className=\"Container\">{children}</div>;\n\nContainer.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","export const getContacts = state => state.contacts.items;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const allContacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport s from './SubmitForm.module.css';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\nimport contactsActions from '../../redux/contacts-actions';\r\nimport { getContacts } from 'redux/contacts-selector';\r\nimport notify from 'helpers/Toast';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nfunction SubmitForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const [id, setId] = useState('');\r\n  const uniqeID = shortid();\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value, id } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n\r\n    setId(id);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === name.toLocaleLowerCase(),\r\n      )\r\n    ) {\r\n      notify(name);\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsActions.AddContact({ name, number }));\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    switch (name) {\r\n      case 'name':\r\n        setName('');\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber('');\r\n        break;\r\n\r\n      case 'id':\r\n        setId('');\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={s.Div}>\r\n        <form className={s.Form} onSubmit={handleSubmit}>\r\n          <label className={s.Label} htmlFor={uniqeID}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              className={s.Input}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              value={name}\r\n              onChange={handleInputChange}\r\n              id={shortid()}\r\n            />\r\n          </label>\r\n          <label className={s.Label}>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              className={s.Input}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={handleInputChange}\r\n              value={number}\r\n              id={shortid()}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={s.Button}>\r\n            Add to contacts\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SubmitForm;\r\n","import React from 'react';\r\nimport style from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport actions from '../../redux/contacts-actions';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { getVisibleContacts } from 'redux/contacts-selector';\r\nimport contactsActions from '../../redux/contacts-actions';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const deleteContact = id => dispatch(contactsActions.deleteContact(id));\r\n\r\n  return (\r\n    <div className={style.Contacts__container}>\r\n      <ul className={style.Contact__list}>\r\n        {contacts.map(contact => {\r\n          return (\r\n            <li key={contact.id} className={style.Contact__item}>\r\n              {contact.name} : {contact.number}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  deleteContact(contact.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => {\r\n//   const { contacts, filter } = state;\r\n\r\n//   const visibleContacts = contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n//   return { contacts: visibleContacts };\r\n// };\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   deleteContact: id => dispatch(actions.deleteContact(id)),\r\n// });\r\n\r\n// ContactList.propTypes = {\r\n//   contacts: PropTypes.oneOfType([\r\n//     PropTypes.arrayOf(\r\n//       PropTypes.shape({\r\n//         id: PropTypes.string.isRequired,\r\n//         name: PropTypes.string.isRequired,\r\n//         number: PropTypes.string.isRequired,\r\n//       }),\r\n//     ),\r\n//     PropTypes.array,\r\n//   ]),\r\n//   deleteContact: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport style from './Filter.module.css';\r\nimport contactsActions from '../../redux/contacts-actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getFilter } from 'redux/contacts-selector';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={style.Label}>\r\n      <p className={style.LabelText}>Filter:</p>{' '}\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\r\n        className={style.Input}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\n// const mapStateToProps = state => ({\r\n//   //! Ниже ошибка\r\n//   value: state.filter,\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onChange: event => dispatch(actions.ChangeFilter(event.target.value)),\r\n// });\r\n\r\nexport default Filter;\r\n","//* Service\r\nimport React, { useState } from 'react';\r\nimport notify from 'helpers/Toast';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport '../index.css';\r\nimport useLocalStorage from 'Hooks/useLocalStorage';\r\n//* Components\r\nimport Container from './Container';\r\nimport SubmitForm from './SubmitForm';\r\nimport ContactList from './ContactList';\r\nimport Filter from './Filter';\r\n\r\nfunction App() {\r\n  // const [contacts, setContacts] = useLocalStorage('contacts', '');\r\n  // const [filter, setFilter] = useState('');\r\n\r\n  // const AddContactOnSubmit = newContact => {\r\n  //   console.log(contacts);\r\n\r\n  //   if (\r\n  //     contacts.find(\r\n  //       contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\r\n  //     )\r\n  //   ) {\r\n  //     notify(newContact.name);\r\n  //     return;\r\n  //   }\r\n\r\n  //   setContacts([newContact, ...contacts]);\r\n  // };\r\n\r\n  // const deleteContact = data => {\r\n  //   setContacts(contacts.filter(contact => contact.id !== data));\r\n  //   // this.setState(prevState => ({\r\n  //   //   contacts: prevState.contacts.filter(contact => contact.id !== data),\r\n  //   // }));\r\n  // };\r\n\r\n  // const onFilter = evt => {\r\n  //   setFilter(evt.target.value);\r\n  // };\r\n\r\n  // const getVisibleContacts = () => {\r\n  //   const normalizedFilter = filter.toLowerCase();\r\n\r\n  //   return contacts.filter(({ name }) =>\r\n  //     name.toLowerCase().includes(normalizedFilter),\r\n  //   );\r\n  // };\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <SubmitForm />\r\n      <h1>Contacts</h1>\r\n      <Filter />\r\n      <ContactList />\r\n      <ToastContainer />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/contacts-store';\nimport './index.css';\nimport App from './components/App';\nimport 'modern-normalize/modern-normalize.css';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<p>loading...</p>} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"SubmitForm_Button__20GLn\",\"Form\":\"SubmitForm_Form__9reeh\",\"Label\":\"SubmitForm_Label__1p1Iy\",\"Input\":\"SubmitForm_Input__3kaBj\"};"],"sourceRoot":""}